# generated by chat gpt ... sorry

def run_program(program, registers):
    # Registers: A, B, C
    A, B, C = registers
    instruction_pointer = 0
    output = []

    while instruction_pointer < len(program):
        # Fetch opcode and operand
        opcode = program[instruction_pointer]
        operand = program[instruction_pointer + 1] if instruction_pointer + 1 < len(program) else 0

        # Helper function to determine combo operand value
        def combo_value(op):
            if op in range(4):  # Combo operands 0-3
                return op
            elif op == 4:  # Register A
                return A
            elif op == 5:  # Register B
                return B
            elif op == 6:  # Register C
                return C
            else:  # Invalid operand
                return 0

        if opcode == 0:  # adv
            denominator = 2 ** combo_value(operand)
            A = A // denominator if denominator != 0 else 0

        elif opcode == 1:  # bxl
            B = B ^ operand

        elif opcode == 2:  # bst
            B = combo_value(operand) % 8

        elif opcode == 3:  # jnz
            if A != 0:
                instruction_pointer = operand
                continue

        elif opcode == 4:  # bxc
            B = B ^ C

        elif opcode == 5:  # out
            output.append(combo_value(operand) % 8)

        elif opcode == 6:  # bdv
            denominator = 2 ** combo_value(operand)
            B = A // denominator if denominator != 0 else 0

        elif opcode == 7:  # cdv
            denominator = 2 ** combo_value(operand)
            C = A // denominator if denominator != 0 else 0

        # Move to the next instruction (opcode + operand)
        instruction_pointer += 2

    return ",".join(map(str, output))

# Example usage:
# registers = [729, 0, 0]  # Initial values: A, B, C
# program = [0, 1, 5, 4, 3, 0]
# output = run_program(program, registers)


registers = [46187030, 0, 0]  # Initial values: A, B, C
program = [2,4,1,5,7,5,0,3,4,0,1,6,5,5,3,0]
output = run_program(program, registers)

print("Output:", output)
